import { getTicks } from '../../src/util/TickUtils';

const EXAMPLE_INPUT = {
  axisLine: true,
  height: 50,
  interval: 'preserveStart' as const,
  label: 'test',
  minTickGap: 5,
  mirror: false,
  orientation: 'bottom' as const,
  stroke: '#666',
  tick: true,
  tickLine: true,
  tickMargin: 2,
  tickSize: 6,
  ticks: [
    { value: 10, coordinate: 50 },
    { value: 1000, coordinate: 100 },
    { value: 20, coordinate: 150 },
    { value: 40, coordinate: 200 },
    { value: 90, coordinate: 250 },
  ],
  length: 5,
  viewBox: { x: 0, y: 0, width: 500, height: 500 },
  width: 400,
  x: 0,
  y: 100,
};

jest.mock('../../src/util/DOMUtils', () => ({
  // We mock string size measurement, because getStringSize else returns 0 in these tests.
  getStringSize: jest.fn(() => ({ width: 20, height: 20 })),
}));

// These tests have been generated by merely documenting existing behaviour.
// They will be used to verify that any refactoring does not break the existing behaviour.
describe('getTicks', () => {
  describe('ticks are always shown if there is space', () => {
    test('preserveEnd', () => {
      const input = { ...EXAMPLE_INPUT, interval: 'preserveEnd' as const };

      const result = getTicks(input);

      expect(result).toEqual([
        { value: 10, coordinate: 50, tickCoord: 50, isShow: true },
        { value: 1000, coordinate: 100, tickCoord: 100, isShow: true },
        { value: 20, coordinate: 150, tickCoord: 150, isShow: true },
        { value: 40, coordinate: 200, tickCoord: 200, isShow: true },
        { value: 90, coordinate: 250, tickCoord: 250, isShow: true },
      ]);
    });

    test('preserveStart', () => {
      const input = { ...EXAMPLE_INPUT, interval: 'preserveStart' as const };

      const result = getTicks(input);

      expect(result).toEqual([
        { value: 10, coordinate: 50, tickCoord: 50, isShow: true },
        { value: 1000, coordinate: 100, tickCoord: 100, isShow: true },
        { value: 20, coordinate: 150, tickCoord: 150, isShow: true },
        { value: 40, coordinate: 200, tickCoord: 200, isShow: true },
        { value: 90, coordinate: 250, tickCoord: 250, isShow: true },
      ]);
    });
  });

  describe('If not all ticks can be shown, the interval is respected', () => {
    test('preserveEnd', () => {
      const input = {
        ...EXAMPLE_INPUT,
        interval: 'preserveEnd' as const,
        viewBox: { x: 0, y: 0, width: 30, height: 500 },
      };

      const result = getTicks(input);

      expect(result).toEqual([
        {
          coordinate: 250,
          isShow: true,
          tickCoord: 20,
          value: 90,
        },
      ]);
    });

    test('preserveStart', () => {
      const input = {
        ...EXAMPLE_INPUT,
        interval: 'preserveStart' as const,

        viewBox: { x: 0, y: 0, width: 30, height: 500 },
      };

      const result = getTicks(input);

      expect(result).toEqual([]);
    });

    test('preserveStartEnd', () => {
      const input = {
        ...EXAMPLE_INPUT,
        interval: 'preserveStart' as const,

        viewBox: { x: 0, y: 0, width: 30, height: 500 },
      };

      const result = getTicks(input);

      expect(result).toEqual([]);
    });

    test('0', () => {
      const input = {
        ...EXAMPLE_INPUT,
        interval: 0,

        viewBox: { x: 0, y: 0, width: 30, height: 500 },
      };

      const result = getTicks(input);

      expect(result).toEqual([
        {
          coordinate: 50,
          value: 10,
        },
        {
          coordinate: 100,
          value: 1000,
        },
        {
          coordinate: 150,
          value: 20,
        },
        {
          coordinate: 200,
          value: 40,
        },
        {
          coordinate: 250,
          value: 90,
        },
      ]);
    });

    test('1', () => {
      const input = {
        ...EXAMPLE_INPUT,
        interval: 1,

        viewBox: { x: 0, y: 0, width: 30, height: 500 },
      };

      const result = getTicks(input);

      expect(result).toEqual([
        {
          coordinate: 50,
          value: 10,
        },
        {
          coordinate: 150,
          value: 20,
        },
        {
          coordinate: 250,
          value: 90,
        },
      ]);
    });

    test('2', () => {
      const input = {
        ...EXAMPLE_INPUT,
        interval: 2,

        viewBox: { x: 0, y: 0, width: 30, height: 500 },
      };

      const result = getTicks(input);

      expect(result).toEqual([
        {
          coordinate: 50,
          value: 10,
        },
        {
          coordinate: 200,
          value: 40,
        },
      ]);
    });
  });
});
